
attribute vec3 a_Position;
attribute vec3 a_Color;
attribute mat4 a_Transform;

uniform mat4 u_ComposedMatrix;

varying vec4 v_Color;

void main()
{
	gl_Position = u_ComposedMatrix * a_Transform * vec4(a_Position, 1.0);
	v_Color = vec4(a_Color, 1.0);
}

attribute vec3 a_Position;
attribute vec4 a_Color;

uniform mat4 u_ComposedMatrix;

varying vec4 v_Color;

void main()
{
	gl_Position = u_ComposedMatrix * vec4(a_Position, 1.0);
	v_Color = a_Color;
}

attribute vec3 a_Position;
attribute vec3 a_Color;

uniform mat4 u_ComposedMatrix;

varying vec3 v_Color;

void main()
{
	gl_Position = u_ComposedMatrix * vec4(a_Position, 1.0);
	v_Color = a_Color;
}

uniform float u_Alpha;

varying vec3 v_Color;

void main()
{
	gl_FragColor = vec4(v_Color, u_Alpha);
}

varying vec4 v_Color;

void main()
{
	gl_FragColor = v_Color;
}

varying vec4 v_Color;

void main()
{
	gl_FragColor = v_Color;
}

attribute vec3 a_Position;
attribute vec3 a_Color;
attribute vec3 a_Offset;
attribute float a_Alpha;

uniform mat4 u_ComposedMatrix;

varying vec4 v_Color;

void main()
{
	gl_Position = u_ComposedMatrix * vec4(a_Position + a_Offset, 1.0);
	v_Color = vec4(a_Color, a_Alpha);
}

varying vec4 v_Color;

void main()
{
	gl_FragColor = v_Color;
}


PUSH -10  -5  1     -10   5  1
PUSH 90 0 0     90 0 0


{ // infinity loop

    PUSH 30 0 +7     30 0 0

    {
        PUSH 60 60 6     50 50 6
        PUSH -60 60 6     -50 50 6

        PUSH -60 -60 6     -50 -50 6
        PUSH 60 -60 6     50 -50 6


        PUSH 60 60 6     50 50 6
        PUSH -60 60 6     -50 50 6

        PUSH -60 -60 6     -50 -50 6
        PUSH 60 -60 6     50 -50 6
    }

    PUSH 40 0 0     40 0 14

    {
        PUSH 50 -50 6     60 -60 6
        PUSH -50 -50 6     -60 -60 6

        PUSH -50 50 6     -60 60 6
        PUSH 50 50 6     60 60 6


        PUSH 50 -50 6     60 -60 6
        PUSH -50 -50 6     -60 -60 6

        PUSH -50 50 6     -60 60 6
        PUSH 50 50 6     60 60 6
    }

    PUSH 30 0 0     30 0 -7

} // infinity loop

PUSH 90 0 0     90 0 0

{ // turned looping

	PUSH 40 0 40     40 0 40
	PUSH -40 0 40     -40 0 40

	PUSH -40 40 -10     -40 30 0
	PUSH 20 40 0     0 40 -10

	PUSH 20 20 0     35 30 0
	PUSH 40 0 0     45 0 0

} // turned looping

PUSH 30 0 0     30 0 0

{ // looping

    PUSH 60 0 0     60 0 0
    PUSH 60 0 60     60 0 60
    PUSH -60 -20 60     -60 -20 60
    PUSH -60 -20 -60     -60 -20 -60
    PUSH 60 -20 -60     60 -20 -60
    PUSH 60 0 0     60 0 0

    PUSH 20 0 0     20 0 0

} // looping


PUSH 30 0 0     30 0 0

PUSH 30 0 0     30 0 0

{ // vertical corner

    PUSH 30 0 0     30 0 0

    PUSH 30 0 30     30 0 30

    PUSH 10 0 40     10 0 40

    PUSH 10 30 30     10 20 15
    PUSH -10 30 -30     -10 20 -15

    PUSH -10 0 -40     -10 0 -40

    PUSH -30 0 -30     -30 0 -30

    PUSH -30 0 0     -30 0 0

} // vertical corner

PUSH -30 0 0     -30 0 0

